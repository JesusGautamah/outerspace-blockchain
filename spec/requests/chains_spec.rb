# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/chains", type: :request do
  let(:valid_attributes) do
    { name: "some chain", maintainer: Faker::Internet.email,
      chain_version: Faker::App.version, description: Faker::Lorem.paragraph }
  end

  let(:invalid_attributes) do
    { name: nil, maintainer: nil, chain_version: nil, description: nil }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Chain.create! valid_attributes
      get chains_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      chain = Chain.create! valid_attributes
      get chain_url(chain)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_chain_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      chain = Chain.create! valid_attributes
      get edit_chain_url(chain)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Chain" do
        expect {
          post chains_url, params: { chain: valid_attributes }
        }.to change(Chain, :count).by(1)
      end

      it "redirects to the created chain" do
        post chains_url, params: { chain: valid_attributes }
        expect(response).to redirect_to(chain_url(Chain.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Chain" do
        expect {
          post chains_url, params: { chain: invalid_attributes }
        }.to change(Chain, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post chains_url, params: { chain: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        { name: "some other chain", maintainer: Faker::Internet.email,
          chain_version: Faker::App.version, description: Faker::Lorem.paragraph }
      end

      it "updates the requested chain" do
        chain = Chain.create! valid_attributes
        patch chain_url(chain), params: { chain: new_attributes }
        chain.reload
      end

      it "redirects to the chain" do
        chain = Chain.create! valid_attributes
        patch chain_url(chain), params: { chain: new_attributes }
        chain.reload
        expect(response).to redirect_to(chain_url(chain))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        chain = Chain.create! valid_attributes
        patch chain_url(chain), params: { chain: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested chain" do
      chain = Chain.create! valid_attributes
      expect {
        delete chain_url(chain)
      }.to change(Chain, :count).by(-1)
    end

    it "redirects to the chains list" do
      chain = Chain.create! valid_attributes
      delete chain_url(chain)
      expect(response).to redirect_to(chains_url)
    end
  end
end
